plugins {
	id 'org.springframework.boot' version '2.5.3'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id "com.google.protobuf" version "0.8.17"
	id 'com.coditory.integration-test' version '1.2.3'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'
targetCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	mavenLocal()
}

dependencies {

	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	//shared
	implementation "com.jules.ss:proto-files:${project['com.jules.ss.proto-files.version']}"
	implementation 'com.jules.ss:common-dtos:1.0.2.1'
	implementation 'com.jules.ss:converters:1.0.1'

	//pub/sub
	implementation platform('com.google.cloud:libraries-bom:20.9.0')
	implementation 'com.google.cloud:google-cloud-pubsub'

	//mongo
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

	//gRPC
	implementation 'io.grpc:grpc-core:1.39.0'
	implementation 'io.grpc:grpc-protobuf:1.39.0'
	implementation 'io.grpc:grpc-stub:1.39.0'
	implementation 'io.grpc:grpc-netty:1.39.0'
	protobuf "com.jules.ss:proto-files:${project['com.jules.ss.proto-files.version']}"
	implementation 'com.google.protobuf:protobuf-lite:3.0.0'

	//kafka
	implementation 'org.springframework.kafka:spring-kafka'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.junit.jupiter:junit-jupiter-params'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.mockito:mockito-core'
	testImplementation 'org.assertj:assertj-core'
	integrationImplementation "org.testcontainers:junit-jupiter:1.15.3"
	integrationImplementation "org.testcontainers:mongodb:1.15.3"

}

tasks.withType(Test) {
	useJUnitPlatform()
	testLogging {
		events = ["passed", "failed", "skipped"]
		exceptionFormat = "full"
	}
}


protobuf {
	protoc {
		artifact = "com.google.protobuf:protoc:3.2.0"
	}
	plugins {
		grpc {
			artifact = 'io.grpc:protoc-gen-grpc-java:1.4.0'
		}
	}
	generateProtoTasks {
		all()*.plugins {
			grpc {}
		}
	}
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}
